import numpy as np
from PIL import Image
from PIL import ImageOps
import math
import cv2


def coef_corr(Image1, Image2):
    im1 = Image1
    im2 = Image2
    # Введем переменные для расчета
    # Среднее значение яркости пикселей первого изображения avg_pix_br_1
    Summ1 = 0

    # Среднее значение яркости пикселей второго изображения
    Summ2 = 0

    # Cумма в числителе
    Summ_ch = 0

    # Cумма в знаменателе
    Summ_zn_1 = 0
    Summ_zn_2 = 0

    if (Image1.shape == Image2.shape):
        x1, y1 = Image1.shape
        for x in range(0, x1):
            for y in range(0, y1):
                Summ1 = Summ1 + im1[x, y]
                Summ2 = Summ2 + im2[x, y]
    else:
        print("Размер изображений не совпадают!")

    avg_pix_br_1 = Summ1 / (x1 * y1)
    # print(Summ1, avg_pix_br_1)

    avg_pix_br_2 = Summ2 / (x1 * y1)
    # print(Summ2, avg_pix_br_2)

    if (Image1.shape == Image2.shape):
        x1, y1 = Image1.shape
        for x in range(0, x1):
            for y in range(0, y1):
                Summ_ch = Summ_ch + ((im1[x, y] - avg_pix_br_1) * (im2[x, y] - avg_pix_br_2))
                Summ_zn_1 = Summ_zn_1 + (im1[x, y] - avg_pix_br_1) ** 2
                Summ_zn_2 = Summ_zn_2 + (im2[x, y] - avg_pix_br_2) ** 2
    else:
        print("Размер изображений не совпадают!")

    Pirsons_coef = Summ_ch / math.sqrt(Summ_zn_1 * Summ_zn_2)

    return round(Pirsons_coef, 5)


pict_num = 7
spisok = [[] for i in range(int(pict_num))]
#spisok = [[] for i in range(int(input(f"Введите количество альфа 1: ")))]
print(spisok)
topor_spisok = []


img1 = ImageOps.flip(Image.open(f"E:/NIOKR_2.0/13.bmp"))
img1 = np.array(img1)
cv2.circle(img1, (img1.shape[0] // 2, img1.shape[1]//2), 20, (0,0,0), -1)

for k in range(0, 1):
    for l in range(0, 21):
        for m in range(0, 21):

            #img1 = Image.open(f"13.bmp").rotate(180, expand=True)
            #img1 = Image.open(f"DN_alfa1_3_alfa2_11_alfa3_11.bmp")

            img2 = Image.open(f"E:/NIOKR_2.0/DN_alfa1_{k}_alfa2_{l}_alfa3_{m}.bmp")
            img2 = np.array(img2)
            cv2.circle(img2, (img2.shape[0] // 2, img2.shape[1] // 2), 20, (0, 0, 0), -1)
            topor_spisok.append(coef_corr(img1, img2))

        spisok[k].append(topor_spisok)
        topor_spisok = []

print(f'Коэффициенты корреляции для тестовых изображений: {spisok}')

Коэффициенты корреляции для тестовых изображений: [[[0.88927, 0.88768, 0.88614, 0.88464, 0.88315, 0.88162, 0.88006, 0.87844, 0.87688, 0.87532, 0.87375, 0.87223, 0.87067, 0.86907, 0.86745, 0.86587, 0.86433, 0.86271, 0.86108, 0.85941, 0.85773], [0.88749, 0.88602, 0.88455, 0.88303, 0.88153, 0.88004, 0.87854, 0.877, 0.87544, 0.87396, 0.87245, 0.87096, 0.86937, 0.8678, 0.86627, 0.86473, 0.86323, 0.86167, 0.86005, 0.85844, 0.85681], [0.88573, 0.88436, 0.88297, 0.88144, 0.8799, 0.87847, 0.87704, 0.8755, 0.87399, 0.87257, 0.87103, 0.86955, 0.86811, 0.86659, 0.86512, 0.86364, 0.86218, 0.86065, 0.85905, 0.85747, 0.85588], [0.88407, 0.88271, 0.88129, 0.87981, 0.87838, 0.87701, 0.87554, 0.87405, 0.87256, 0.8711, 0.86967, 0.86824, 0.86687, 0.86541, 0.86389, 0.86253, 0.86107, 0.85955, 0.85796, 0.85643, 0.85481], [0.88233, 0.88098, 0.87962, 0.87824, 0.8769, 0.87548, 0.87401, 0.87256, 0.87117, 0.86974, 0.86835, 0.86701, 0.86564, 0.86419, 0.86277, 0.86128, 0.85987, 0.85842, 0.85692, 0.85536, 0.85389], [0.88065, 0.87927, 0.878, 0.87668, 0.87536, 0.87392, 0.87249, 0.87111, 0.8698, 0.86847, 0.86706, 0.86569, 0.86432, 0.86297, 0.86157, 0.86013, 0.85878, 0.85739, 0.85593, 0.85444, 0.85301], [0.87892, 0.87765, 0.87636, 0.87506, 0.87371, 0.87241, 0.87104, 0.86973, 0.86846, 0.86711, 0.86569, 0.86442, 0.86308, 0.86174, 0.86039, 0.85905, 0.85772, 0.85638, 0.85496, 0.85358, 0.85211], [0.87714, 0.87598, 0.87475, 0.87345, 0.8722, 0.87095, 0.86963, 0.86836, 0.86706, 0.8657, 0.86442, 0.86316, 0.86194, 0.86059, 0.85926, 0.85799, 0.85674, 0.8554, 0.85404, 0.85261, 0.85122], [0.87551, 0.87438, 0.87309, 0.8719, 0.87067, 0.86946, 0.86819, 0.8669, 0.86561, 0.86439, 0.86314, 0.86197, 0.86076, 0.85947, 0.85821, 0.85701, 0.85574, 0.85443, 0.85308, 0.8517, 0.85031], [0.87387, 0.87267, 0.87146, 0.87032, 0.86918, 0.86796, 0.86669, 0.86544, 0.86422, 0.86305, 0.86193, 0.86075, 0.85954, 0.85831, 0.85707, 0.85585, 0.85463, 0.85337, 0.85203, 0.85071, 0.84937], [0.87211, 0.87092, 0.86982, 0.86878, 0.86771, 0.86643, 0.86522, 0.86406, 0.86294, 0.86177, 0.86063, 0.85949, 0.85831, 0.85707, 0.85586, 0.85476, 0.85359, 0.85238, 0.85102, 0.84976, 0.84851], [0.87047, 0.86942, 0.86831, 0.86728, 0.86616, 0.86494, 0.86376, 0.86269, 0.86164, 0.86052, 0.85932, 0.85818, 0.85703, 0.85593, 0.85477, 0.85371, 0.85255, 0.85138, 0.8501, 0.84886, 0.84765], [0.86891, 0.86788, 0.8668, 0.86569, 0.86458, 0.86342, 0.86229, 0.86131, 0.86031, 0.85914, 0.85803, 0.85698, 0.85587, 0.8548, 0.85376, 0.85265, 0.85157, 0.85041, 0.84919, 0.84796, 0.84675], [0.86727, 0.86624, 0.86512, 0.86404, 0.86305, 0.86203, 0.86096, 0.85996, 0.8589, 0.85778, 0.85679, 0.85576, 0.85477, 0.85377, 0.85271, 0.85165, 0.85056, 0.84946, 0.84828, 0.84709, 0.84594], [0.86566, 0.86456, 0.86348, 0.86259, 0.86167, 0.86066, 0.85964, 0.85863, 0.8576, 0.85656, 0.85558, 0.85463, 0.85367, 0.85272, 0.8517, 0.85067, 0.8496, 0.84851, 0.84738, 0.84621, 0.84506], [0.86399, 0.86289, 0.86201, 0.86113, 0.86024, 0.85924, 0.85822, 0.85724, 0.85627, 0.85533, 0.85444, 0.85352, 0.8526, 0.85165, 0.85063, 0.84958, 0.84857, 0.84751, 0.84644, 0.84535, 0.84425], [0.86231, 0.86137, 0.86049, 0.85965, 0.85872, 0.85765, 0.85672, 0.8558, 0.85498, 0.85405, 0.85324, 0.85235, 0.85145, 0.85044, 0.84944, 0.84847, 0.84754, 0.84653, 0.84555, 0.84446, 0.84346], [0.86063, 0.85978, 0.85895, 0.85812, 0.85712, 0.85615, 0.85532, 0.85455, 0.85376, 0.85287, 0.85204, 0.85112, 0.85023, 0.84928, 0.84833, 0.84737, 0.84649, 0.84557, 0.84456, 0.8436, 0.84263], [0.85901, 0.85826, 0.8575, 0.85654, 0.85569, 0.85475, 0.85405, 0.85328, 0.85251, 0.85166, 0.85076, 0.84992, 0.84906, 0.84819, 0.84723, 0.84635, 0.84548, 0.84459, 0.84366, 0.84275, 0.84177], [0.85754, 0.85675, 0.85589, 0.85505, 0.85423, 0.85348, 0.85279, 0.85203, 0.85127, 0.85036, 0.84948, 0.84868, 0.84783, 0.84701, 0.84613, 0.84534, 0.84455, 0.84371, 0.84279, 0.84192, 0.84097], [0.85595, 0.85514, 0.85435, 0.85352, 0.8528, 0.85211, 0.85142, 0.85073, 0.8499, 0.84906, 0.84818, 0.84738, 0.84673, 0.8459, 0.84514, 0.84437, 0.84357, 0.84281, 0.84196, 0.8411, 0.8402]], [], [], [], [], [], []]
